
		Lazy Backup

	The very idea is to backup everything that is not from
	distro packages.

	And do that continiously while system is running.

	Lazy Backup consists of several parts.

	Program lb-list-in continiously scans filesystem and prepare list
	of files that should be backed up.

	Program lb-enqueue continiously scans thouse files and prepare
	list of files that are not backed up yet.

	Program lb-backup actually transfer files to archive.

		Be Lazy

	Common to all utilities is low impact on system. This is done
	by inserting sleep...

=be_lazy
-void be_lazy(void) {
-}


		List In

	Program lb-list-in traverse directories and writes filenames, filesizes,
	mtime and ctime into list file.

	At the beginning it starts with / with content:

		bin
		boot
		cimplyfile
		dev
		etc
		home

	It simply writes all names to list file and marks which are directories. This data
	is prefixed by that data length.

=write_dir
-off_t write_dir(void) {
-	off_t start=lseek(wl,0,SEEK_CUR);
-	uint32_t len=0;
-	write(wl,&len,4);
-	DIR *p=opendir(".");
-	struct dirent *d;
-	for(;(d=readdir(p));) {
-		uint32_t l=strlen(d->d_name);
-		if(d->d_name[0]=='.') {
-			if(l==1) continue;
-			if(l==2 && d->d_name[1]=='.') continue;
-		}

-		struct stat st;
-		lstat(d->d_name,&st);
-		if(st.st_dev != fs) continue;

-		len+=l+20;
-		if(S_ISDIR(st.st_mode)) l|=0x80000000;

-		uint32_t x;
-		uint64_t y;

-		write(wl,&l,4);

-		y=st.st_size;
-		write(wl,&y,8);
-		x=st.st_mtime;
-		write(wl,&x,4);
-		x=st.st_ctime;
-		write(wl,&x,4);
-		write(wl,d->d_name,l&0x7fffffff);
-	}
-	closedir(p);
-	pwrite(wl,&len,4,start);
-	return start;
-}

	Then it seeks back in a list file, read names and recursively
	descends into directories.

=process_dir
-void process_dir(off_t start) {
-	static char name[NAME_MAX];
-	lseek(rl,start,SEEK_SET);
-	uint32_t len;
-	read(rl,&len,4);
-	for(;len;) {
-		int isdir;
-		uint32_t l;
-		read(rl,&l,4);
-		lseek(rl,16,SEEK_CUR);
-		isdir=l&0x80000000;
-		l&=0x7fffffff;
-		read(rl,name,l);
-		name[l]=0;


-		if(isdir) {
-			if(chdir(name)==0) {
-				off_t pos=lseek(rl,0,SEEK_CUR);

-				process_dir(write_dir());

-				lseek(rl,pos,SEEK_SET);
-				chdir("..");
-			}
-		}
-		len-=l+20;
-	}
-}


=>main.c
-#include <fcntl.h>
-#include <unistd.h>
-#include <dirent.h>
-#include <string.h>
-#include <stdint.h>
-#include <sys/stat.h>

-static int rl,wl;
-static dev_t fs;

>write_dir
>process_dir

-int main(int argc, char *argv[]) {
-	if(argc!=3) {
-		char usage[]="Usage: lazyback / list\n\n";
-		write(1,usage,sizeof(usage));
-		return 1;
-	}
-	wl=open(argv[2],O_CREAT|O_TRUNC|O_WRONLY,0664);
-	rl=open(argv[2],O_RDONLY,0664);

-	struct stat st;
-	lstat(".",&st);
-	fs=st.st_dev;
-	chdir(argv[1]);
-	
-	process_dir(write_dir());

-	return 0;
-}


		Enqueue

	Goes through list file, checks filesize, mtime and ctime
	of actual file against listed.

	If changed, writes full path to changelog.

	First, we scan whole directory and check all files.

=enqueue_process_dir
-void process_dir(off_t start) {
-	static char path[PATH_MAX];
-	getcwd(path,sizeof(path));

-	static char name[NAME_MAX];
-	lseek(rl,start,SEEK_SET);
-	uint32_t len;
-	read(rl,&len,4);
-	for(;len;) {
-		int isdir;
-		uint32_t l;
-		read(rl,&l,4);

-		uint32_t mt,ct;
-		uint64_t size;
		
-		read(rl,&size,8);
-		read(rl,&mt,4);
-		read(rl,&ct,4);

-		isdir=l&0x80000000;
-		l&=0x7fffffff;
-		read(rl,name,l);
-		name[l]=0;

-		struct stat st;
-		lstat(name,&st);

-		if(st.st_mtime!=mt || st.st_ctime!=ct || st.st_size!=size) {
-			printf("C %s/%s%s\n",path,name,isdir?"/":"");
-		}
-		len-=l+20;
-	}
-}

	Then, we scan whole directory again, and only process directories
	by descending into them.

	Trick is in a separate cursor variable, which tracks offset of
	not yet processed directories.

	Also, if we can't descend into directory (due to it being removed
	or permission changes) we still go through all subdirectories to
	advance cursor (see 'ignore' parameter).

=descend_into_subdirs
-static off_t cursor;

-void descend_into_subdirs(off_t start,int ignore) {
-	static char name[NAME_MAX];
-	lseek(rl,start,SEEK_SET);
-	uint32_t len;
-	read(rl,&len,4);
-	cursor+=len+4;
-	for(;len;) {
-		int isdir;
-		uint32_t l;
-		read(rl,&l,4);
-		lseek(rl,16,SEEK_CUR);
-		isdir=l&0x80000000;
-		l&=0x7fffffff;
-		read(rl,name,l);
-		name[l]=0;

-		if(isdir) {
-			if(!ignore) {
-				ignore=chdir(name);
-				if(ignore) {
-					static char path[PATH_MAX];
-					getcwd(path,sizeof(path));
-					printf("R %s/%s\n",path,name);
-				}
-			}
-			off_t pos=lseek(rl,0,SEEK_CUR);
-			if(!ignore) process_dir(cursor);
-			descend_into_subdirs(cursor,ignore);
-			if(!ignore) chdir("..");
-			lseek(rl,pos,SEEK_SET);
-		}
-		len-=l+20;
-	}
-}




=>main-enqueue.c
-#include <fcntl.h>
-#include <unistd.h>
-#include <dirent.h>
-#include <string.h>
-#include <stdint.h>

-#undef NDEBUG
-#include <assert.h>

-static int rl,wl;

>enqueue_process_dir
>descend_into_subdirs

-int main(int argc, char *argv[]) {
-	if(argc!=4) {
-		char usage[]="Usage: lazyback-enqueue / list changes\n\n";
-		write(1,usage,sizeof(usage));
-		return 1;
-	}
-	rl=open(argv[2],O_RDONLY,0664);
-	wl=open(argv[3],O_CREAT|O_TRUNC|O_WRONLY,0664);
-	chdir(argv[1]);

-	cursor=0;
-	process_dir(0);
-	descend_into_subdirs(0,0);
-}




		Making dpkg-ignore List

	Each inode in a list represented by one byte at
	inode number offset.

=process_file
-void process_file(char *name) {
-	struct stat st;
-	lstat(name,&st);
-	if(fs!=st.st_dev) return;
-	if(!S_ISREG(st.st_mode) && !S_ISLNK(st.st_mode)) return;
-
-	pwrite(wl,"\1",1,st.st_ino);
-}

	Ignore list is prepared from md5 listings. Program
	lazyback-dpkg-ignore scans through all .md5sums
	files in a directory and marks inodes which are
	present.

=process_list
-void process_list(char *name) {
-	int f=open(name,O_RDONLY);
-	chdir("/");

-	static char buf[PATH_MAX+34]; // 32 md5 + space + newline

-	char *p=buf;
-	int r=read(f,buf,sizeof(buf));
-	char *e=buf+r;
-	char *E=buf+sizeof(buf);

-	for(;;) {
-		int n=e-p;
-		char *nl=memchr(p,'\n',n);
-		if(!nl) {
-			memmove(buf,p,n);
-			p=buf;
-			e=buf+n;

-			int r=read(f,e,E-e);
-			if(r<=0) break;
-			e+=r;

-			continue;
-		}
-
-		*nl=0;
-		p[32]=0;
-		process_file(p+34);
-		p=nl+1;
-	}
-	close(f);
-}


	Also you need to provide directory to be backed up
	as program ignore files which are not on backup
	filesystem.


=>main-dpkg-ignore.c
-#include <fcntl.h>
-#include <unistd.h>
-#include <dirent.h>
-#include <string.h>
-#include <sys/stat.h>

-static int wl;
-static dev_t fs;

>process_file
>process_list

-int main(int argc, char *argv[]) {
-	if(argc!=4) {
-		char usage[]="Usage: lazyback-dpkg-ignore / /var/lib/dpkg/info ignore\n\n";
-		write(1,usage,sizeof(usage));
-		return 1;
-	}
-	wl=open(argv[3],O_CREAT|O_TRUNC|O_WRONLY,0664);

-	struct stat st;
-	lstat(argv[1],&st);
-	fs=st.st_dev;

-	DIR *p=opendir(argv[2]);
-	struct dirent *d;
-	for(;(d=readdir(p));) {
-		int l=strlen(d->d_name);
-		if(l<8) continue;
-		if(strncmp(d->d_name+l-7,".md5sum",7)==0) {
-			chdir(argv[2]);
-			process_list(d->d_name);
-		}
-	}
-	closedir(p);

-	close(wl);
-	
-}

