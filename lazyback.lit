
		Lazy Backup

	The very idea is to backup everything that is not from
	distro packages.

	And do that continiously while system is running.

	Lazy Backup consists of several parts.

	Program lb-list-in continiously scans filesystem and prepare list
	of files that should be backed up.

	Program lb-enqueue continiously scans thouse files and prepare
	list of files that are not backed up yet.

	Program lb-backup actually transfer files to archive.


		List In

	Program lb-list-in traverse directories and writes filenames, filesizes,
	mtime and ctime into list file.

	At the beginning it starts with / with content:

		bin
		boot
		cimplyfile
		dev
		etc
		home

	It simply writes all names to list file and marks which are directories. This data
	is prefixed by that data length.

=write_dir
-off_t write_dir(void) {
-	off_t start=lseek(wl,0,SEEK_CUR);
-	uint32_t len=0;
-	write(wl,&len,4);
-	DIR *p=opendir(".");
-	struct dirent *d;
-	for(;(d=readdir(p));) {
-		uint32_t l=strlen(d->d_name);
-		if(d->d_name[0]=='.') {
-			if(l==1) continue;
-			if(l==2 && d->d_name[1]=='.') continue;
-		}

-		struct stat st;
-		lstat(d->d_name,&st);
-		if(st.st_dev != fs) continue;

-		len+=l+20;
-		if(d->d_type==DT_DIR) l|=0x80000000;

-		uint32_t x;
-		uint64_t y;

-		write(wl,&l,4);

-		y=st.st_size;
-		write(wl,&y,8);
-		x=st.st_mtime;
-		write(wl,&x,4);
-		x=st.st_ctime;
-		write(wl,&x,4);
-		write(wl,d->d_name,l&0x7fffffff);
-	}
-	closedir(p);
-	pwrite(wl,&len,4,start);
-	return start;
-}

	Then it seeks back in a list file, read names and recursively
	descends into directories.

=process_dir
-void process_dir(off_t start) {
-	static char name[NAME_MAX];
-	lseek(rl,start,SEEK_SET);
-	uint32_t len;
-	read(rl,&len,4);
-	for(;len;) {
-		int isdir;
-		uint32_t l;
-		read(rl,&l,4);
-		lseek(rl,16,SEEK_CUR);
-		isdir=l&0x80000000;
-		l&=0x7fffffff;
-		read(rl,name,l);
-		name[l]=0;


-		if(isdir) {
-			if(chdir(name)==0) {
-				off_t pos=lseek(rl,0,SEEK_CUR);

-				process_dir(write_dir());

-				lseek(rl,pos,SEEK_SET);
-				chdir("..");
-			}
-		}
-		len-=l+20;
-	}
-}


=>main.c
-#include <fcntl.h>
-#include <unistd.h>
-#include <dirent.h>
-#include <string.h>
-#include <stdint.h>

-static int rl,wl;
-static dev_t fs;

>write_dir
>process_dir

-int main(int argc, char *argv[]) {
-	if(argc!=3) {
-		char usage[]="Usage: lazyback / list\n\n";
-		write(1,usage,sizeof(usage));
-		return 1;
-	}
-	wl=open(argv[2],O_CREAT|O_TRUNC|O_WRONLY,0664);
-	rl=open(argv[2],O_RDONLY,0664);

-	struct stat st;
-	lstat(".",&st);
-	fs=st.st_dev;
-	chdir(argv[1]);
-	
-	process_dir(write_dir());

-	return 0;
-}


		Enqueue

	Goes through list file, checks filesize, mtime and ctime
	of actual file against listed.

	If changed, writes full path to changelog.


=>main-enqueue.c
-#include <fcntl.h>
-#include <unistd.h>
-#include <dirent.h>
-#include <string.h>
-#include <stdint.h>

-#undef NDEBUG
-#include <assert.h>

-static int rl,wl;
-static off_t cursor;

-void process_files(off_t start) {
-	static char path[PATH_MAX];
-	getcwd(path,sizeof(path));

-	static char name[NAME_MAX];
-	lseek(rl,start,SEEK_SET);
-	uint32_t len;
-	read(rl,&len,4);
-	for(;len;) {
-		int isdir;
-		uint32_t l;
-		read(rl,&l,4);
-		lseek(rl,16,SEEK_CUR);
-		isdir=l&0x80000000;
-		l&=0x7fffffff;
-		read(rl,name,l);
-		name[l]=0;

-		if(!isdir) {
-			printf("F %s/%s\n",path,name);
-		}
-		len-=l+20;
-	}
-}

-void process_dirs(off_t start,int ignore) {
-	static char name[NAME_MAX];
-	lseek(rl,start,SEEK_SET);
-	uint32_t len;
-	read(rl,&len,4);
-	cursor+=len+4;
-	for(;len;) {
-		int isdir;
-		uint32_t l;
-		read(rl,&l,4);
-		lseek(rl,16,SEEK_CUR);
-		isdir=l&0x80000000;
-		l&=0x7fffffff;
-		read(rl,name,l);
-		name[l]=0;

-		if(isdir) {
-			static char path[PATH_MAX];
-			if(!ignore) {
-				ignore=chdir(name);
-				getcwd(path,sizeof(path));
-				printf("%c %s/%s\n",ignore?'I':'D',path,name);
-			}
-			off_t pos=lseek(rl,0,SEEK_CUR);
-			if(!ignore) process_files(cursor);
-			process_dirs(cursor,ignore);
-			if(!ignore) chdir("..");
-			lseek(rl,pos,SEEK_SET);
-		}
-		len-=l+20;
-	}
-}



-int main(int argc, char *argv[]) {
-	if(argc!=4) {
-		char usage[]="Usage: lazyback-enqueue / list changes\n\n";
-		write(1,usage,sizeof(usage));
-		return 1;
-	}
-	rl=open(argv[2],O_RDONLY,0664);
-	wl=open(argv[3],O_CREAT|O_TRUNC|O_WRONLY,0664);
-	chdir(argv[1]);

-	cursor=0;
-	process_files(0);
-	process_dirs(0,0);
-}


