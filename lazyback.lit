
		Lazy Backup

	The very idea is to backup everything that is not from
	distro packages.

	And do that continiously while system is running.

	Lazy Backup consists of several parts.

	Program lb-list-in continiously scans filesystem and prepare list
	of files that should be backed up.

	Program lb-enqueue continiously scans thouse files and prepare
	list of files that are not backed up yet.

	Program lb-backup actually transfer files to archive.


		List In

	Program lb-list-in traverse directories and writes filenames into
	list file.

	At the beginning it starts with / with content:

		bin
		boot
		cimplyfile
		dev
		etc
		home

	It simply writes all names to list file and marks which are directories. This data
	is prefixed by that data length.

=write_dir
-off_t write_dir(void) {
-	off_t start=lseek(wl,0,SEEK_CUR);
-	uint32_t len=0;
-	write(wl,&len,4);
-	DIR *p=opendir(".");
-	struct dirent *d;
-	for(;(d=readdir(p));) {
-		uint32_t l=strlen(d->d_name);
-		if(d->d_name[0]=='.') {
-			if(l==1) continue;
-			if(l==2 && d->d_name[1]=='.') continue;
-		}
-		len+=l+4;
-		if(d->d_type==DT_DIR) l|=0x80000000;
-		write(wl,&l,4);
-		write(wl,d->d_name,l&0x7fffffff);
-	}
-	closedir(p);
-	pwrite(wl,&len,4,start);
-	return start;
-}

	Then it seeks back in a list file, read names and recursively
	descends into directories.

=process_dir
-void process_dir(off_t start) {
-	static char name[NAME_MAX];
-	lseek(rl,start,SEEK_SET);
-	uint32_t len;
-	read(rl,&len,4);
-	for(;len;) {
-		int isdir;
-		uint32_t l;
-		read(rl,&l,4);
-		isdir=l&0x80000000;
-		l&=0x7fffffff;
-		read(rl,name,l);
-		name[l]=0;
-		if(isdir) {
-			if(chdir(name)==0) {
-				off_t pos=lseek(rl,0,SEEK_CUR);

-				if(getfs()==fs) process_dir(write_dir());

-				lseek(rl,pos,SEEK_SET);
-				chdir("..");
-			}
-		}
-		len-=l+4;
-	}
-}


=getfs
-dev_t getfs(void) {
-	struct stat st;
-	lstat(".",&st);
-	return st.st_dev;
-}


=>main.c
-#include <fcntl.h>
-#include <unistd.h>
-#include <dirent.h>
-#include <string.h>
-#include <stdint.h>

-static int rl,wl;
-static dev_t fs;

>getfs
>write_dir
>process_dir

-int main(int argc, char *argv[]) {
-	if(argc!=3) {
-		char usage[]="Usage: lazyback / list\n\n";
-		write(1,usage,sizeof(usage));
-		return 1;
-	}
-	wl=open(argv[2],O_CREAT|O_TRUNC|O_WRONLY,0664);
-	rl=open(argv[2],O_RDONLY,0664);

-	fs=getfs();
-	chdir(argv[1]);
-	
-	process_dir(write_dir());

-	return 0;
-}

